{"version":3,"sources":["calendar.js","actions.js","reportWebVitals.js","reducer.js","event.js","index.js"],"names":["mapDispatchToProps","resetToDefault","type","selectCalendarMember","selectedMember","deleteEvent","time","day","connect","state","calendar","users","isEventCreatedSuccessfuly","filterByMember","filterByMembers","className","to","onChange","event","target","value","map","member","keys","isAvailable","isDefined","get","undefined","includes","eventText","onClick","window","confirm","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initDaysMap","Map","initialState","eventName","eventSelectedUsers","eventSelectedDay","eventSelectedTime","isEventTimeFree","reducer","action","text","selectedUsers","selectedDay","selectedTime","length","newCalendar","set","newCalendarAfterDelete","changeTextEvent","selectEventUsers","selectEventDay","selectEventTime","createEvent","class","role","data-bs-dismiss","aria-label","htmlFor","placeholder","options","name","handleOnChange","selected","store","createStore","router","exact","from","path","component","Calendar","Event","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.424d5a23.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { resetToDefault, selectCalendarMember, deleteEvent } from './actions';\n\n\nconst Calendar = ({ users, calendar, resetToDefault, isEventCreatedSuccessfuly, selectCalendarMember, filterByMember, deleteEvent }) => {\n    if (isEventCreatedSuccessfuly === true) {\n        resetToDefault();\n    }\n\n    const filterByMembers = ['All members', ...users];\n    return (\n        <div className=\"container-fluid\">\n            <div className=\"row\">\n                <div className=\"col-6\">\n                    <h1 className=\"position1\">Calendar</h1>\n                </div>\n                <div className=\"col-6\">\n                    <div className=\"control-btn\">\n                        <Link to=\"/create-event\" className=\"btn btn-light\">New event +</Link>\n                        <div className=\"filter-by\">\n                            <select className=\"form-select\" onChange={(event) => selectCalendarMember(event.target.value)}>\n                                {filterByMembers.map(member => (\n                                    <option value={member} key={member}>{member}</option>\n                                ))}\n                            </select>\n                        </div>\n                    </div>\n                </div>\n                <div>\n                    <table className=\"table table-bordered table-hover\">\n                        <colgroup>\n                            <col className=\"col-2\"></col>\n                            <col className=\"col-2\"></col>\n                            <col className=\"col-2\"></col>\n                            <col className=\"col-2\"></col>\n                            <col className=\"col-2\"></col>\n                            <col className=\"col-2\"></col>\n                        </colgroup>\n                        <thead className=\"table-light\">\n                            <tr>\n                                <th>Name</th>\n                                <th>Mon</th>\n                                <th>Tue</th>\n                                <th>Wed</th>\n                                <th>Thu</th>\n                                <th>Fri</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {[...calendar.keys()].map(time => {\n                                const isAvailable = (day) => {\n                                    const isDefined = calendar.get(time).get(day);\n                                    if (isDefined === undefined) return undefined;\n\n                                    if (filterByMember != 'All members' && isDefined.users.includes(filterByMember) === false) {\n                                        return undefined;\n                                    }\n                                    \n                                    return isDefined\n                                }\n                                return(\n                                    <tr>\n                                        <td>{time}</td>\n                                        <td className={isAvailable(\"Mon\") ? \"table-success\" : \"\"}>{isAvailable(\"Mon\") ? <div>{isAvailable(\"Mon\").eventText} <span onClick={() => window.confirm(`Are you sure you want to delete \"${isAvailable(\"Mon\").eventText}\" event?`) ? deleteEvent(time, \"Mon\") : ''}>X</span></div> : \"\"}</td>\n                                        <td className={isAvailable(\"Tue\") ? \"table-success\" : \"\"}>{isAvailable(\"Tue\") ? <div>{isAvailable(\"Tue\").eventText} <span onClick={() => window.confirm(`Are you sure you want to delete \"${isAvailable(\"Tue\").eventText}\" event?`) ? deleteEvent(time, \"Tue\") : ''}>X</span></div> : \"\"}</td>\n                                        <td className={isAvailable(\"Wed\") ? \"table-success\" : \"\"}>{isAvailable(\"Wed\") ? <div>{isAvailable(\"Wed\").eventText} <span onClick={() => window.confirm(`Are you sure you want to delete \"${isAvailable(\"Wed\").eventText}\" event?`) ? deleteEvent(time, \"Wed\") : ''}>X</span></div> : \"\"}</td>\n                                        <td className={isAvailable(\"Thu\") ? \"table-success\" : \"\"}>{isAvailable(\"Thu\") ? <div>{isAvailable(\"Thu\").eventText} <span onClick={() => window.confirm(`Are you sure you want to delete \"${isAvailable(\"Thu\").eventText}\" event?`) ? deleteEvent(time, \"Thu\") : ''}>X</span></div> : \"\"}</td>\n                                        <td className={isAvailable(\"Fri\") ? \"table-success\" : \"\"}>{isAvailable(\"Fri\") ? <div>{isAvailable(\"Fri\").eventText} <span onClick={() => window.confirm(`Are you sure you want to delete \"${isAvailable(\"Fri\").eventText}\" event?`) ? deleteEvent(time, \"Fri\") : ''}>X</span></div> : \"\"}</td>\n                                    </tr>\n                                )\n                            })}\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        calendar: state.calendar,\n        users: state.users,\n        isEventCreatedSuccessfuly: state.isEventCreatedSuccessfuly,\n        filterByMember: state.filterByMember,\n    }\n}\nconst mapDispatchToProps = {\n    resetToDefault,\n    selectCalendarMember,\n    deleteEvent,\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Calendar);","\nexport const changeTextEvent = (text) => ({type:\"CHANGE_TEXT_EVENT\", text});\nexport const selectEventUsers = (selectedUsers) => ({type:\"SELECT_EVENT_USERS\", selectedUsers});\nexport const selectEventDay = (selectedDay) => ({ type: \"SELECT_EVENT_DAY\", selectedDay});\nexport const selectEventTime = (selectedTime) => ({ type: \"SELECT_EVENT_TIME\", selectedTime});\nexport const createEvent = () => ({ type: \"CREATE_EVENT\" });\nexport const resetToDefault = () => ({ type: \"RESET_TO_DEFAULT\" });\nexport const selectCalendarMember = (selectedMember) => ({ type: \"SELECT_CALENDAR_MEMBER\", selectedMember});\nexport const deleteEvent = (time, day) => ({ type: \"DELETE_EVENT\", time, day});","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import calendar from \"./calendar\";\n\nconst initDaysMap = () => {\n    let map = new Map([\n        [\"Mon\", undefined],\n        [\"Tue\", undefined],\n        [\"Wed\", undefined],\n        [\"Thu\", undefined],\n        [\"Fri\", undefined],\n    ]);\n    return map\n}\n\nconst initCalendarMap = () => {\n    let map = new Map([\n        [\"10:00\",initDaysMap()],\n        [\"11:00\",initDaysMap()],\n        [\"12:00\",initDaysMap()],\n        [\"13:00\",initDaysMap()],\n        [\"14:00\",initDaysMap()],\n        [\"15:00\",initDaysMap()],\n        [\"16:00\",initDaysMap()],\n        [\"17:00\",initDaysMap()],\n        [\"18:00\",initDaysMap()],\n    ])\n    return map\n}\n\nconst initialState = {\n    users: [\"Liza\", \"Jenia\", \"Katya\", \"Den\"],\n    calendar: initCalendarMap(),\n    eventName: '',\n    eventSelectedUsers: [],\n    eventSelectedDay: 'Mon',\n    eventSelectedTime: '10:00',\n    isEventTimeFree: true,\n    isEventCreatedSuccessfuly: false,\n    filterByMember: 'All members',\n}\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case \"CHANGE_TEXT_EVENT\": \n            return {\n            ...state,\n            eventName: action.text,\n        }\n        case \"SELECT_EVENT_USERS\":\n            return {\n                ...state,\n                eventSelectedUsers: action.selectedUsers,\n            }\n        case \"SELECT_EVENT_DAY\":\n            return {\n                ...state,\n                eventSelectedDay: action.selectedDay,\n            }\n        case \"SELECT_EVENT_TIME\":\n            return {\n                ...state,\n                eventSelectedTime: action.selectedTime,\n            }\n        case \"CREATE_EVENT\": \n            if (state.eventName == '' || state.eventSelectedUsers.length == 0) {\n                return state;\n            }\n\n            if (state.calendar.get(state.eventSelectedTime).get(state.eventSelectedDay) != undefined) {\n                return {\n                    ...state,\n                    isEventTimeFree: false,\n                };\n            }\n\n            const newCalendar = new Map(state.calendar);\n            newCalendar.get(state.eventSelectedTime).set(state.eventSelectedDay, {eventText: state.eventName, users: state.eventSelectedUsers});\n            \n            return {\n                ...state,\n                calendar: newCalendar,\n                isEventCreatedSuccessfuly: true,\n            }\n        case \"RESET_TO_DEFAULT\":\n            return {\n                ...state,\n                eventName: '',\n                eventSelectedUsers: [],\n                eventSelectedDay: 'Mon',\n                eventSelectedTime: '10:00',\n                isEventTimeFree: true,\n                isEventCreatedSuccessfuly: false,\n            }\n        case \"SELECT_CALENDAR_MEMBER\":\n            return {\n                ...state,\n                filterByMember: action.selectedMember,\n            }\n        case \"DELETE_EVENT\":\n            const newCalendarAfterDelete = new Map(state.calendar);\n            newCalendarAfterDelete.get(action.time).set(action.day, undefined);\n\n            return {\n                ...state,\n                calendar: newCalendarAfterDelete,\n            }\n        default:\n            return state;\n    }\n};\n\nexport default reducer;","import React from 'react';\nimport { connect } from 'react-redux';\nimport { changeTextEvent, selectEventUsers, selectEventDay, selectEventTime, createEvent } from './actions';\nimport DropdownMultiselect from \"react-multiselect-dropdown-bootstrap\";\nimport { Link } from 'react-router-dom';\nimport { Redirect } from 'react-router-dom';\n\nconst Event = ({eventName, changeTextEvent, users, selectEventUsers, calendar, selectEventDay, selectEventTime, createEvent, isEventTimeFree, isEventCreatedSuccessfuly}) => {\n    if (isEventCreatedSuccessfuly === true) {\n        return(<Redirect to=\"/calendar\" />)\n    }\n    return (\n        <div className=\"container\">\n            {isEventTimeFree ? \"\" : \n                <div class=\"alert alert-danger alert-dismissible fade show\" role=\"alert\">\n                    <strong>Failed to create an event! Time slot is already booked</strong>\n                    <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button>\n                </div>\n            }\n            <div className=\"row\">\n                <div className=\"col-3\"></div>\n                <div className=\"col-6 new-event\">\n                    <div className=\"row mb-3\">\n                        <label htmlFor=\"inputEmail3\" className=\"col-4 col-form-label\">Name of the event:</label>\n                        <div className=\"col-8\">\n                            <input onChange={(event) => changeTextEvent(event.target.value)} value={eventName} className=\"form-control\" type=\"text\" placeholder=\"FE team sync\"></input>\n                        </div>\n                    </div>\n                    <div className=\"row mb-3\">\n                        <label htmlFor=\"inputEmail3\" className=\"col-4 col-form-label\">Participants:</label>\n                        <div className=\"col-8\">\n                            <DropdownMultiselect options={users} name=\"users\" handleOnChange={(selected) => selectEventUsers(selected)} />\n                        </div>\n                    </div>\n                    <div className=\"row mb-3\">\n                        <label htmlFor=\"inputEmail3\" className=\"col-4 col-form-label\">Day:</label>\n                        <div className=\"col-8\">\n                            <select className=\"form-select\" onChange={(event) => selectEventDay(event.target.value)}>\n                                {[...calendar.get(\"10:00\").keys()].map(day => (\n                                    <option value={day} key={day}>{day}</option>\n                                ))}\n                            </select>\n                        </div>\n                    </div>\n                    <div className=\"row mb-3\">\n                        <label htmlFor=\"inputEmail3\" className=\"col-4 col-form-label\">Time:</label>\n                        <div className=\"col-8\">\n                            <select className=\"form-select\" onChange={(event) => selectEventTime(event.target.value)}>\n                                {[...calendar.keys()].map(time => (\n                                    <option value={time} key={time}>{time}</option>\n                                ))}\n                            </select>\n                        </div>\n                    </div>\n                    <div className=\"row\">\n                        <div className=\"col align-self-end\">\n                            <Link to=\"/calendar\" className=\"btn btn-light distance\">Cancel</Link>\n                            <button className=\"btn btn-light distance\" onClick={() => createEvent()}>Create</button>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"col-3\"></div>\n            </div>\n        </div>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        eventName: state.eventName,\n        users: state.users,\n        calendar: state.calendar,\n        isEventTimeFree: state.isEventTimeFree,\n        isEventCreatedSuccessfuly: state.isEventCreatedSuccessfuly,\n    }\n}\n\nconst mapDispatchToProps = {\n    changeTextEvent,\n    selectEventUsers,\n    selectEventDay,\n    selectEventTime,\n    createEvent,\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(Event);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './App.css';\nimport Calendar from './calendar';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { createStore } from 'redux';\nimport reducer from './reducer';\nimport {Provider} from 'react-redux';\nimport Event from './event';\nimport { BrowserRouter as Router, Switch, Route, Redirect } from 'react-router-dom';\n\nconst store = createStore(reducer);\nconst router = (\n  <Provider store={store}>\n     <Router>\n        <Switch>\n          <Redirect exact from=\"/\" to=\"/calendar\" />\n          <Route path=\"/calendar\" component={Calendar} />\n          <Route path=\"/create-event\" component={Event} />\n        </Switch>\n      </Router>\n  </Provider>\n)\n\n// ReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\nReactDOM.render(router, document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}